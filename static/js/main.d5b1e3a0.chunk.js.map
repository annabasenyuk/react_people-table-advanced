{"version":3,"sources":["utils/searchHelper.ts","components/SearchLink.tsx","types/SexPerson.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PeopleLink.tsx","types/Sort.ts","utils/getSortingOptions.tsx","components/PeopleTable.tsx","api.ts","utils/prepareFilteredPeople.tsx","components/PeoplePage.tsx","components/Navbar.tsx","components/HomePage.tsx","components/ErrorPage.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","to","search","SexPerson","centuriesList","PeopleFilters","filter","setSearchParams","centuries","getAll","sex","get","className","map","cn","type","placeholder","query","onChange","event","target","includes","century","length","Loader","PeopleLink","person","slug","name","Sort","getSortingOptions","sort","order","sortingOptions","PeopleTable","people","personSlug","useParams","mother","find","mom","motherName","father","dad","fatherName","born","died","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","PeoplePage","useState","setPeople","isLoading","setIsLoading","peopleError","setPeopleError","useRouterSearchParams","visiblePeople","peoples","Math","ceil","trimmedQuery","trim","toLowerCase","input","a","b","Name","Sex","localeCompare","Born","Died","reverse","prepareFilteredPeople","loadData","peopleData","useEffect","Navbar","createNavLink","text","isActive","role","HomePage","ErrorPage","App","path","element","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d5b1e3a0.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum SexPerson {\n  All = '',\n  Male = 'm',\n  Female = 'f',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { SetURLSearchParams } from 'react-router-dom';\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { Filter } from '../types/Filter';\nimport { SexPerson } from '../types/SexPerson';\n\ntype Props = {\n  searchParams: URLSearchParams;\n  setSearchParams: SetURLSearchParams;\n};\n\nconst centuriesList = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters: React.FC<Props> = ({\n  searchParams,\n  setSearchParams,\n}, filter: Filter) => {\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const search = getSearchWith(searchParams, (\n      { query: event.target.value || null }\n    ));\n\n    setSearchParams(search);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(SexPerson).map(([key, value]) => (\n          <SearchLink\n            key={key}\n            params={{ sex: value || null }}\n            className={cn({\n              'is-active': sex === value,\n            })}\n          >\n            {key}\n          </SearchLink>\n        ))}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={filter.query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n\n            {centuriesList.map(key => (\n              <SearchLink\n                key={key}\n                data-cy=\"century\"\n                className={cn('button mr-1',\n                  { 'is-info': centuries.includes(key) })}\n                params={{\n                  centuries: centuries.includes(key)\n                    ? centuries.filter(century => century !== key)\n                    : [...centuries, key],\n                }}\n              >\n                {key}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button is-success',\n                { 'is-outlined': centuries.length })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: null,\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PeopleLink: React.FC<Props> = ({ person }) => (\n  <Link\n    to={`/people/${person.slug}`}\n    className={cn({\n      'has-text-danger': person.sex === 'f',\n    })}\n  >\n    {`${person.name}`}\n  </Link>\n);\n","export enum Sort {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import { SearchParams } from './searchHelper';\n\nexport function getSortingOptions(\n  sort: string | null,\n  order: string | null,\n  value: string,\n) {\n  const sortingOptions: SearchParams = {\n    sort: null,\n    order: null,\n  };\n\n  if (!sort) {\n    sortingOptions.sort = value;\n  }\n\n  if (sort && sort !== value) {\n    sortingOptions.sort = value;\n  }\n\n  if (sort === value && !order) {\n    sortingOptions.sort = value;\n    sortingOptions.order = 'desc';\n  }\n\n  return sortingOptions;\n}\n","import { useParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../types';\nimport { PeopleLink } from './PeopleLink';\nimport { SearchLink } from './SearchLink';\nimport { Sort } from '../types/Sort';\nimport { getSortingOptions } from '../utils/getSortingOptions';\n\ntype Props = {\n  people: Person[];\n  searchParams: URLSearchParams;\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n  searchParams,\n}) => {\n  const { personSlug } = useParams();\n  const order = searchParams.get('order') || '';\n  const sort = searchParams.get('sort') || '';\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(Sort).map(([key, value]) => (\n            <th key={key}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {key}\n                <SearchLink\n                  params={getSortingOptions(sort, order, value)}\n                >\n                  <span className=\"icon\">\n                    <i className={cn('fas', {\n                      'fa-sort': sort !== value,\n                      'fa-sort-up': sort === value && !order,\n                      'fa-sort-down': sort === value && order,\n                    })}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const mother = people.find(mom => mom.name === person.motherName);\n          const father = people.find(dad => dad.name === person.fatherName);\n\n          return (\n            <tr\n              key={person.slug}\n              data-cy=\"person\"\n              className={cn({\n                'has-background-warning': personSlug === person.slug,\n              })}\n            >\n              <td>\n                <PeopleLink person={person} />\n              </td>\n\n              <td>{`${person.sex}`}</td>\n              <td>{`${person.born}`}</td>\n              <td>{`${person.died}`}</td>\n              <td>\n                {\n                  mother\n                    ? <PeopleLink person={mother} />\n                    : person.motherName || '-'\n                }\n              </td>\n              <td>\n                {\n                  father\n                    ? <PeopleLink person={father} />\n                    : person.fatherName || '-'\n                }\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { Person } from '../types';\nimport { Sort } from '../types/Sort';\nimport { Filter } from '../types/Filter';\n\nexport const prepareFilteredPeople = (people: Person[], filter: Filter) => {\n  let peoples = [...people];\n\n  if (filter.sex) {\n    peoples = peoples\n      .filter((person => (person.sex === filter.sex)));\n  }\n\n  if (filter.centuries.length) {\n    peoples = peoples.filter(person => {\n      return (\n        filter.centuries.includes(Math.ceil(person.born / 100).toString())\n      );\n    });\n  }\n\n  if (filter.query) {\n    const trimmedQuery = filter.query.trim().toLowerCase();\n\n    peoples = peoples.filter(\n      input => input.name.toLowerCase().includes(trimmedQuery)\n        || input.motherName?.toLowerCase().includes(trimmedQuery)\n        || input.fatherName?.toLowerCase().includes(trimmedQuery),\n    );\n  }\n\n  if (filter.sort) {\n    peoples.sort((a, b) => {\n      switch (filter.sort) {\n        case Sort.Name:\n        case Sort.Sex:\n          return a[filter.sort].localeCompare(b[filter.sort]);\n        case Sort.Born:\n        case Sort.Died:\n          return (a[filter.sort] - b[filter.sort]);\n        default: return 0;\n      }\n    });\n  }\n\n  if (filter.order) {\n    peoples.reverse();\n  }\n\n  return peoples;\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams as useRouterSearchParams } from 'react-router-dom';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { prepareFilteredPeople } from '../utils/prepareFilteredPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [peopleError, setPeopleError] = useState('');\n  const [searchParams, setSearchParams] = useRouterSearchParams();\n\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n  const sex = searchParams.get('sex') || '';\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const visiblePeople = prepareFilteredPeople(people, {\n    sort, order, sex, query, centuries,\n  });\n\n  const loadData = async () => {\n    setIsLoading(true);\n    try {\n      const peopleData = await getPeople();\n\n      setPeople(peopleData);\n    } catch (error) {\n      setPeopleError('Something went wrong');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters\n              searchParams={searchParams}\n              setSearchParams={setSearchParams}\n            />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {peopleError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  {peopleError}\n                </p>\n              )}\n\n              {!isLoading && !people.length && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!!people.length && !visiblePeople.length && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {!!people.length && !!visiblePeople.length && (\n                <PeopleTable\n                  people={visiblePeople}\n                  searchParams={searchParams}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nexport const Navbar = () => {\n  const createNavLink = (to: string, text: string) => (\n    <NavLink\n      aria-current=\"page\"\n      className={\n        ({ isActive }) => cn(\n          'navbar-item', {\n            'has-background-grey-lighter': isActive,\n          },\n        )\n      }\n      to={to}\n    >\n      {text}\n    </NavLink>\n  );\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          {createNavLink('/', 'Home')}\n          {createNavLink('/people', 'People')}\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage: React.FC = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export const ErrorPage: React.FC = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Routes, Route, Navigate } from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\nimport { HomePage } from './components/HomePage';\nimport { ErrorPage } from './components/ErrorPage';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n            <Route index element={<HomePage />} />\n\n            <Route path=\"people\">\n              <Route index element={<PeoplePage />} />\n              <Route path=\":personSlug?\" element={<PeoplePage />} />\n            </Route>\n\n            <Route path=\"*\" element={<ErrorPage />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}